
==================== FINAL INTERFACE ====================
2017-12-09 22:27:37.129805 UTC

interface main@main:Main 8002
  interface hash: 7fe46366cf8a63e0a5e396bfb1235630
  ABI hash: cefdf5a669c0a453e922044c490bb4d0
  export-list hash: 4fceb7d8be376096bf4acd38936f9789
  orphan hash: 035d1bfb1b7cb666ece9a7edfce398ee
  flag hash: 8cb05b873cd35cb0f8438d1f747e189c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI
                      QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      haskell-words-0.1.0.0@haskell-words-0.1.0.0-1KENKS1h3Aj7RTqdk2mv5B
                      hspec-2.4.4@hspec-2.4.4-Ct0Af2AzisB8bPqGMHHFvj
                      hspec-core-2.4.4@hspec-core-2.4.4-Ezb0jq4rRfBJWZtpolvs1E
                      hspec-expectations-0.8.2@hspec-expectations-0.8.2-DujBeQFEMmfJJRLad7XQgd
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      quickcheck-io-0.2.0@quickcheck-io-0.2.0-4pLO1WRxoBW9gt8EnME0zS
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      setenv-0.1.1.3@setenv-0.1.1.3-8dEhk6JWvlmCmVyBammSpu
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         quickcheck-io-0.2.0@quickcheck-io-0.2.0-4pLO1WRxoBW9gt8EnME0zS:Test.QuickCheck.IO
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         hspec-core-2.4.4@hspec-core-2.4.4-Ezb0jq4rRfBJWZtpolvs1E:Test.Hspec.Core.Example
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskell-words-0.1.0.0@haskell-words-0.1.0.0-1KENKS1h3Aj7RTqdk2mv5B:Data 1cbebd50dcf4a2db416b3a182ec68cf6
import  -/  haskell-words-0.1.0.0@haskell-words-0.1.0.0-1KENKS1h3Aj7RTqdk2mv5B:Lib 38c4391bc904d67dd0405b4a7a6f40ed
import  -/  hspec-2.4.4@hspec-2.4.4-Ct0Af2AzisB8bPqGMHHFvj:Test.Hspec 04ea8eba4a0731a497f82df2f1be76d5
import  -/  hspec-core-2.4.4@hspec-core-2.4.4-Ezb0jq4rRfBJWZtpolvs1E:Test.Hspec.Core.Runner c79a89c5a9ba4275f04053dfa6118e70
import  -/  hspec-core-2.4.4@hspec-core-2.4.4-Ezb0jq4rRfBJWZtpolvs1E:Test.Hspec.Core.Spec 4de3fc7b2286a4370366c92ba3ff97ab
import  -/  hspec-expectations-0.8.2@hspec-expectations-0.8.2-DujBeQFEMmfJJRLad7XQgd:Test.Hspec.Expectations 29d4e6711b7d6d8a68fed679467f46e6
e22714a049e4e272b95341c39b450cc6
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe [Lib.Cell])
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [Lib.Cell])
                  Main.$s$fEqMaybe2
                  (GHC.Base.$fEqMaybe_$c/= @ [Lib.Cell] Main.$s$fEqMaybe1) -}
8ef2ff0ac3e5483d381247892509023c
  $s$fEqMaybe1 :: GHC.Classes.Eq [Lib.Cell]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fEqMaybe_$s$fEq[] -}
9dc4b834f1a1e443ff107d19a1c5fcaa
  $s$fEqMaybe2 ::
    GHC.Base.Maybe [Lib.Cell]
    -> GHC.Base.Maybe [Lib.Cell] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: GHC.Base.Maybe [Lib.Cell])
                   (ds1 :: GHC.Base.Maybe [Lib.Cell]) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> GHC.Classes.$fEq[]_$c== @ Lib.Cell Lib.$fEqCell a1 b1 } }) -}
7b39a11935ae9b8c069ee96108bec700
  $s$fEqMaybe_$s$fEq[] :: GHC.Classes.Eq [Lib.Cell]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Lib.Cell]
                  (GHC.Classes.$fEq[]_$c== @ Lib.Cell Lib.$fEqCell)
                  Main.$s$fEqMaybe_$s$fEq[]_$c/= -}
8ff35a37d99845203902e3a24a968c86
  $s$fEqMaybe_$s$fEq[]_$c/= ::
    [Lib.Cell] -> [Lib.Cell] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Lib.Cell]) (y :: [Lib.Cell]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c== @ Lib.Cell Lib.$fEqCell x y)) -}
f3e3c91a69a941a8ee7c6ad25ed539bc
  $s$fEq[] :: GHC.Classes.Eq [[Lib.Cell]]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[Lib.Cell]]
                  (GHC.Classes.$fEq[]_$c== @ [Lib.Cell] Main.$s$fEqMaybe1)
                  Main.$s$fEq[]_$s$fEq[]_$c/= -}
73af5c0154859f60904bc5ba11167bce
  $s$fEq[]_$s$fEq[]_$c/= ::
    [[Lib.Cell]] -> [[Lib.Cell]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [[Lib.Cell]]) (y :: [[Lib.Cell]]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c== @ [Lib.Cell] Main.$s$fEqMaybe1 x y)) -}
7b2596d7644eec2674549f81e377c057
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe [Lib.Cell])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [Lib.Cell])
                  (GHC.Show.$fShowMaybe_$cshowsPrec @ [Lib.Cell] Main.$s$fShowMaybe1)
                  (GHC.Show.$fShowMaybe_$cshow @ [Lib.Cell] Main.$s$fShowMaybe1)
                  Main.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
c5c929d4561c4889e04655d1873c2cbd
  $s$fShowMaybe1 :: GHC.Show.Show [Lib.Cell]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fShowMaybe_$s$fShow[] -}
a368fef1920cd171c4cc14d72aea7a02
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe [Lib.Cell]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe [Lib.Cell]])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe [Lib.Cell])
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ [Lib.Cell]
                      Main.$s$fShowMaybe1
                      GHC.Show.shows22)
                   eta
                   eta1) -}
1fe9f808b4eb1ecfdd50505805433ff4
  $s$fShowMaybe_$s$fShow[] :: GHC.Show.Show [Lib.Cell]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Lib.Cell]
                  Main.$s$fShowMaybe_$s$fShow[]_$cshowsPrec
                  Main.$s$fShowMaybe_$s$fShow[]_$cshow
                  Main.$s$fShowMaybe_$s$fShow[]_$cshowList -}
b77256522528159f044cdc84d5c44aad
  $s$fShowMaybe_$s$fShow[]_$cshow :: [Lib.Cell] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Lib.Cell]) ->
                 Lib.$fShowCell_$cshowList x (GHC.Types.[] @ GHC.Types.Char)) -}
cf1134b8976a83ecce8318e5dd4dc262
  $s$fShowMaybe_$s$fShow[]_$cshowList ::
    [[Lib.Cell]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [[Lib.Cell]]) (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Lib.Cell]
                   Lib.$fShowCell_$cshowList
                   eta
                   eta1) -}
277f1df1c6164b225326357a4ba3b531
  $s$fShowMaybe_$s$fShow[]_$cshowsPrec ::
    GHC.Types.Int -> [Lib.Cell] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int)
                   (eta :: [Lib.Cell])
                   (eta1 :: GHC.Base.String) ->
                 Lib.$fShowCell_$cshowList eta eta1) -}
ad48e67a571e85399b0435418d4b5a43
  $s$fShow[] :: GHC.Show.Show [[Lib.Cell]]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[Lib.Cell]]
                  Main.$s$fShow[]_$s$fShow[]_$cshowsPrec
                  Main.$s$fShow[]1
                  Main.$s$fShow[]_$s$fShow[]_$cshowList -}
9d9419b2841c8c60c80919ae99a60897
  $s$fShow[]1 :: [[Lib.Cell]] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [[Lib.Cell]]) ->
                 GHC.Show.showList__
                   @ [Lib.Cell]
                   Lib.$fShowCell_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b640cb7a5ee992a65fd896eb108e45e8
  $s$fShow[]_$s$fShow[]_$cshowList ::
    [[[Lib.Cell]]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [[[Lib.Cell]]]) (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [[Lib.Cell]]
                   Main.$s$fShowMaybe_$s$fShow[]_$cshowList
                   eta
                   eta1) -}
d90584256d9d9587758182c8362d54fc
  $s$fShow[]_$s$fShow[]_$cshowsPrec ::
    GHC.Types.Int -> [[Lib.Cell]] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int)
                   (eta :: [[Lib.Cell]])
                   (eta1 :: GHC.Base.String) ->
                 Main.$s$fShowMaybe_$s$fShow[]_$cshowList eta eta1) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
b72fc40774e04999ff6c410349632c2e
  gwc :: Lib.Grid Lib.Cell
  {- Unfolding: (GHC.List.zipWith
                   @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                   @ [GHC.Types.Char]
                   @ [Lib.Cell]
                   Main.main19
                   Lib.coordsGrid
                   Data.grid) -}
486f1ab3a66385556e66bbe2ce4e85ed
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7caf0e0a5bf548cda3f62d0bdf010823
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Test.Hspec.Core.Runner.hspec2
                        Test.Hspec.Core.Options.defaultConfig
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.die2 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
874e55887b2e0e601ecbec838736bffb
  main10 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main11) -}
513a7f609d900bb2f8657dcc1525475e
  main100 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main101) -}
2390256bf1b0c4e560b79e7dea9b2ff6
  main101 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main102) -}
8f3df36f872ac8cd4b448e001fed2e53
  main102 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main103) -}
0915dc9841d3565b87a8163598510b12
  main103 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main47
                   Main.main104
                   GHC.Stack.Types.EmptyCallStack) -}
a4bb9c3d074d1d5ca099845d75e47b47
  main104 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main105
                   Main.main45
                   Main.main105
                   Main.main44) -}
4511b90822fcfc403008067a71f9b202
  main105 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 22#) -}
5574ddf68bd22aa82dda11ba1040097f
  main106 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg (GHC.Types.IO ()))]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg (GHC.Types.IO ())))
                   Main.main107
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg (GHC.Types.IO ()))))) -}
4584805d77d07ff5166045d74e908be2
  main107 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg (GHC.Types.IO ())))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg (GHC.Types.IO ())))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg (GHC.Types.IO ())))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg (GHC.Types.IO ())))
                   Main.main108) -}
06c1d2469f4f97fde4d79d487014010f
  main108 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg (GHC.Types.IO ()))
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg (GHC.Types.IO ()))
                   Main.main133
                   Main.main124
                   GHC.Types.False
                   Main.main109
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg (GHC.Types.IO ()))
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
7db321d5151a4902f1ee7f98103a6601
  main109 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg (GHC.Types.IO ()))
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ (GHC.Types.IO ())
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main110 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
80d97baa378e067f1bbdb62c3b075a03
  main11 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main48
                   Main.main37
                   GHC.Types.False
                   Main.main12
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
09fed3b03ad92154d38808d4f884e033
  main110 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.main113 Main.main112 s of ds1 { (#,#) ipv ipv1 ->
                 Main.main113 Main.main111 ipv }) -}
1cd2bbe1a7d57542f8fb03cfdcc712ac
  main111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PERL"#) -}
1aaeb337280ce6f772acc0400cd82dee
  main112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HASKELL"#) -}
a27a939fe2e073bba08d994187886696
  main113 ::
    [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (word :: [GHC.Types.Char])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (Main.main116
                    (GHC.Types.[] @ GHC.Types.Char)
                    word
                    (case Data.Maybe.catMaybes1
                            @ [Lib.Cell]
                            (GHC.Base.map
                               @ [Lib.Cell]
                               @ (GHC.Base.Maybe [Lib.Cell])
                               (Lib.findWordInLine word)
                               Main.main115) of wild {
                       [] -> case Main.main114 ret_ty [GHC.Types.Char] of {}
                       : a1 ds1
                       -> GHC.Base.map @ Lib.Cell @ GHC.Types.Char Lib.cell2char a1 }))
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta) -}
ded657acf1eabceccae7b7bc1d83550f
  main114 :: ([Lib.Cell])
  {- Strictness: x -}
261ff37736a84e5f28ee9ce9eb8568c7
  main115 :: [[Lib.Cell]]
  {- Unfolding: (Lib.getLines Main.gwc) -}
6b046b3946138933e19218b15673a884
  main116 ::
    GHC.Base.String
    -> [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ [GHC.Types.Char]
                   Main.main117
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1) -}
ae4b5897debc0897aecdd504d9a3613b
  main117 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main118) -}
8cb1a4d5670bd9806a856e1d524cb2e4
  main118 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main119) -}
9edcc3718cc81587f84813ea2a7a8777
  main119 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main36
                   Main.main120
                   GHC.Stack.Types.EmptyCallStack) -}
fa0f1edb83edeafecfb9156f82f87f9b
  main12 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main13) -}
8df0c22cb9ea4d093fba277b463d93f4
  main120 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main123
                   Main.main122
                   Main.main123
                   Main.main121) -}
c8b7b368425a3a4f85abc8c62ec6c37d
  main121 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 27#) -}
d302222a0e1c0741579cf9734f111106
  main122 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
7aa7547bfe8c66228d53c48b921cd1f1
  main123 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
aa1f8e55b44588e9b92617c32ac3f9c3
  main124 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main125
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
e312cdddb602afeb7d7363225dce9f56
  main125 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main126) -}
5ae8edd90156efb0cb5e1a0d09553135
  main126 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main127) -}
81dd4f49b164347f2416d6adfb31c803
  main127 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main128) -}
f464abb245292ac6d3bcc16fef145380
  main128 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main129) -}
3d5fa690f32091f0e6ac9e44cc435c5a
  main129 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main47
                   Main.main130
                   GHC.Stack.Types.EmptyCallStack) -}
33d9686a42b0b3d329721ff08d78c2c3
  main13 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.main25
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ [Lib.Cell])
                   Main.main14) -}
d2cbb1431ba722fcd62ae36bf19ef06e
  main130 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main132
                   Main.main45
                   Main.main132
                   Main.main131) -}
99ce5354f8904aa638eb5d9847aa3c11
  main131 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 48#) -}
b7032618c0d650f3ff0b686ab5dbd374
  main132 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 19#) -}
3dd0d66a658f159e88e36a1930fd33fb
  main133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main50
                   Main.main134) -}
bde77b57f02bf3191c67b641548c6925
  main134 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "hould fine words that exist on the Grid"#) -}
61d77b5fc211338da17584d9a065eea9
  main135 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main81
                   Main.main136) -}
9ae493fc49cabaf49171ac51b2177141
  main136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "indWord"#) -}
0b5f558f1147fe85d135cb1d5f34eba8
  main137 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main170
                   Main.main138
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
55f00d248a7d0041dd29339753e8022b
  main138 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main139
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
de37cf9804991f6e6eb6300a92cc0d59
  main139 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main140) -}
1aa2dd9edb71f05107fab94262007acc
  main14 :: [[Lib.Cell]]
  {- Unfolding: (Data.Maybe.catMaybes1 @ [Lib.Cell] Main.main15) -}
151bdbde7c93f84ba3daca0ca88731d0
  main140 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main168
                   Main.main159
                   GHC.Types.False
                   Main.main141
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
efc7211897473125763c5e3b30e4a1bf
  main141 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main142) -}
f9d7966254c772134ed1a1d1df5fa1e3
  main142 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.main152
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main151
                   Main.main143) -}
51ce24962b841596fbdce7a666066b6b
  main143 :: GHC.Base.String
  {- Unfolding: (Data.OldList.unlines Main.main144) -}
3757a8092e1d4592fe86065c6728e1d5
  main144 :: [[GHC.Types.Char]]
  {- Unfolding: (Main.main_go Lib.coordsGrid Main.main145) -}
dd015e9de370323d856493d59f5b8726
  main145 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main150
                   Main.main146) -}
b3fb86e267bcefbea7932ab00012fac3
  main146 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main149
                   Main.main147) -}
a2b63c5bb5f0581a44b9372f2cb39844
  main147 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main148
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
9ddac49b7ab4ecebab05aa06e1752657
  main148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ghi"#) -}
f4a0a11aef6f228dd6aa3975fa365940
  main149 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "def"#) -}
c90ec1c8a73fb68f45d3a183a10e938c
  main15 :: [GHC.Base.Maybe [Lib.Cell]]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe [Lib.Cell])
                   Main.main23
                   Main.main16) -}
fc2f3e39978aae48729b9609ec5554e6
  main150 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "abc"#) -}
bd97249049dca8eb91c412ea1a5e245f
  main151 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "abc\n\
                   \def\n\
                   \ghi\n"#) -}
08260f2439b2d47ad5a43c1325495dc7
  main152 ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Base.String -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ GHC.Base.String
                   Main.main153
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1) -}
ffa2c02c3e5531a85817b9cca71c6cc5
  main153 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main154) -}
e6708cb47bb1ca7d94f65f1be2cd96ef
  main154 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main155) -}
830edac48589c92560aa092f36471390
  main155 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main36
                   Main.main156
                   GHC.Stack.Types.EmptyCallStack) -}
cba6473e2a26409cfd1a95244fbef959
  main156 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main158
                   Main.main31
                   Main.main158
                   Main.main157) -}
7842467c3874e54dd13c9ce59d14ee86
  main157 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 84#) -}
5a5e3ae5a02481c81a4ead3872d2f7f5
  main158 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 16#) -}
604d9415882a885a378076c14a38dada
  main159 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main160
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
3edbdbc51d06ae17eca6281b2c33f041
  main16 :: [GHC.Base.Maybe [Lib.Cell]]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe [Lib.Cell])
                   Main.main21
                   Main.main17) -}
e5458f7fcfb0cdbda9b1f429d0e01d54
  main160 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main161) -}
21d62c6cb794de6961b6c538486f7a39
  main161 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main162) -}
f90640e7bed22a6df57bcb822a4c6957
  main162 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main163) -}
d288fec4b43f2da9b2e880da5d571f82
  main163 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main164) -}
b4ed2517fc952995e62e675891519971
  main164 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main47
                   Main.main165
                   GHC.Stack.Types.EmptyCallStack) -}
179006c9839f3a5cfbc2f7839a417de8
  main165 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main167
                   Main.main45
                   Main.main167
                   Main.main166) -}
cfa44839df8e74ad3de93e4379c522fd
  main166 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 52#) -}
ddf08d5eaad98f4fba0d0879da07ef9d
  main167 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 15#) -}
dfeac1f8a98df4ba87544d304b9d8217
  main168 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main50
                   Main.main169) -}
c5be305b7ac8d28db9778278f65cf30a
  main169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "hould concatenate every line with a newline"#) -}
c6b564bbd43700c2ea51b110429d3f3b
  main17 :: [GHC.Base.Maybe [Lib.Cell]]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe [Lib.Cell])
                   Main.main18
                   (GHC.Types.[] @ (GHC.Base.Maybe [Lib.Cell]))) -}
3b9f96b1344a1103067b5b6a3556408c
  main170 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main81
                   Main.main171) -}
18ebb90b54db273aeb37eb26955c8b98
  main171 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ormatGrid"#) -}
c8d9ecbbd28dc9bb4775086609f8f0f7
  main172 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
69071fca3f57aae14323d62f6f609921
  main18 :: GHC.Base.Maybe [Lib.Cell]
  {- Unfolding: (case Data.Maybe.catMaybes1
                        @ [Lib.Cell]
                        (GHC.Base.map
                           @ [Lib.Cell]
                           @ (GHC.Base.Maybe [Lib.Cell])
                           (Lib.findWordInLine Main.main20)
                           (Lib.getLines Main.gwc)) of wild {
                   [] -> GHC.Base.Nothing @ [Lib.Cell]
                   : a1 ds1 -> GHC.Base.Just @ [Lib.Cell] a1 }) -}
6e533c0dd9c29e85c27a1f625e30a175
  main19 ::
    [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
    -> [GHC.Types.Char] -> [Lib.Cell]
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.List.zipWith
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   @ GHC.Types.Char
                   @ Lib.Cell
                   Lib.Cell) -}
2fa5b9bae1de059aadc8976041cb2cb1
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main3 #)) -}
0eb8f075d4faca6228652f6c2fd5ed71
  main20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "friends"#) -}
da37e97341dc8e4e663673816a1766d1
  main21 :: GHC.Base.Maybe [Lib.Cell]
  {- Unfolding: (case Data.Maybe.catMaybes1
                        @ [Lib.Cell]
                        (GHC.Base.map
                           @ [Lib.Cell]
                           @ (GHC.Base.Maybe [Lib.Cell])
                           (Lib.findWordInLine Main.main22)
                           (Lib.getLines Main.gwc)) of wild {
                   [] -> GHC.Base.Nothing @ [Lib.Cell]
                   : a1 ds1 -> GHC.Base.Just @ [Lib.Cell] a1 }) -}
87fe5fbb1d6593c6c7598938a88817a8
  main22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "there"#) -}
4ba17ab8bac2c55ffa8ec315212cb7ad
  main23 :: GHC.Base.Maybe [Lib.Cell]
  {- Unfolding: (case Data.Maybe.catMaybes1
                        @ [Lib.Cell]
                        (GHC.Base.map
                           @ [Lib.Cell]
                           @ (GHC.Base.Maybe [Lib.Cell])
                           (Lib.findWordInLine Main.main24)
                           (Lib.getLines Main.gwc)) of wild {
                   [] -> GHC.Base.Nothing @ [Lib.Cell]
                   : a1 ds1 -> GHC.Base.Just @ [Lib.Cell] a1 }) -}
db8035d2a7d1c628ebdd7b29373ffe05
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hello"#) -}
2ac7bdcf3b40ccd1d745599ec7a8273e
  main25 ::
    GHC.Base.String
    -> [[Lib.Cell]] -> [[Lib.Cell]] -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ [[Lib.Cell]]
                   Main.main26
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEq[]
                   Main.$s$fShow[]) -}
2815412ee6c21adc00f2f1b8b5abbe69
  main26 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main27) -}
077a7adc4522b33d9082c4409bdc5458
  main27 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main28) -}
839965d4f813c15b328db235c6c6c0cc
  main28 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main36
                   Main.main29
                   GHC.Stack.Types.EmptyCallStack) -}
25ed799a4f5a76f435634b2ee80609e4
  main29 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main32
                   Main.main31
                   Main.main32
                   Main.main30) -}
58b11297c4ea2fcb68da9d0749c36d86
  main3 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- Unfolding: ((GHC.Tuple.(), Main.main4)) -}
d57ea48f594dadb2c21e28b018057a1d
  main30 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 61#) -}
e503a8252b1be2f99f442fcf9e78eabd
  main31 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
6f0dc18339994fa43914bbc614e71508
  main32 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 31#) -}
3dd27ef662963987e620bbe19bdd9438
  main33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/Spec.hs"#) -}
e1bc27b45ab413de001c41a1aee070a0
  main34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
3fc86d81dbb515975830fc8d08e2af2f
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
ead5d6071399db6cf10a9e37797e8e20
  main36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shouldBe"#) -}
00e1f9e2d36c2ee9572487beada9014b
  main37 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main38
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
3cebe7ff0e0ed08aab5ba0f45928be5d
  main38 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main39) -}
9f8c8ae4f1628cccdede8e2869b4f7c3
  main39 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main40) -}
6dc0301b24b341fdb232681cf6b2e915
  main4 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main137
                   Main.main5) -}
cedd7b47e7cf49eb795587b37155992d
  main40 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main41) -}
7c245bbdc44b2906a19a5af2519c0f5a
  main41 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main42) -}
3f9e26e7633d2d2f0522318b382b128b
  main42 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main47
                   Main.main43
                   GHC.Stack.Types.EmptyCallStack) -}
55437982d97581a09f99a450d1991fc8
  main43 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main46
                   Main.main45
                   Main.main46
                   Main.main44) -}
0d669aa4bb5299c19e2d58f1d0d254a4
  main44 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 59#) -}
14606628f34d225cc9fe744d4edf4e2d
  main45 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3#) -}
2a7f7d5f23c35cbe4c3076beb66bdd0f
  main46 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 30#) -}
71c8f93a558bf11e4042d349eaae55fc
  main47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "it"#) -}
270203d83e4f729390e60aeb37271118
  main48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main50
                   Main.main49) -}
f8da50760113e4904c5bfcee6f09b4ea
  main49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "hould not find words that do not exist on the Grid"#) -}
884de021d19a48b65dc006d8204897e6
  main5 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main82
                   Main.main6) -}
2c5ccaf6d51ecf4738cd9344f07a299c
  main50 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'S'#) -}
62769365475f2fc09e283970ff5c203c
  main51 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main52
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
e61854c80eef96a423480c9bd49d9472
  main52 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main53) -}
d2a6d498fc6aa758c904db50a826c936
  main53 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main77
                   Main.main68
                   GHC.Types.False
                   Main.main54
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
c66d5e83c0514f1b9a0ae4849f1b8cb9
  main54 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main55) -}
78a1b1c2d4ab7769b8974d1b028a81e0
  main55 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.main61
                   (GHC.Types.[] @ GHC.Types.Char)
                   Data.languages
                   Main.main56) -}
4b7875d6521982ecdce92ad7c32f78cb
  main56 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Base.map
                   @ [Lib.Cell]
                   @ [GHC.Types.Char]
                   Main.main60
                   Main.main57) -}
017ddce8180a02e41992867ce2a8af8f
  main57 :: [[Lib.Cell]]
  {- Unfolding: (Data.Maybe.catMaybes1 @ [Lib.Cell] Main.main58) -}
f3c0937ac35bd8277ae109acf40c1cfe
  main58 :: [GHC.Base.Maybe [Lib.Cell]]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ (GHC.Base.Maybe [Lib.Cell])
                   Main.main59
                   Data.languages) -}
50496b8ad793cbb06e8f2df8b36653b1
  main59 :: GHC.Base.String -> GHC.Base.Maybe [Lib.Cell]
  {- Arity: 1, Unfolding: (Lib.findWord Main.gwc) -}
63d33fbfee5fe426e70ceae4be049627
  main6 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main7
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
e70e45956125daa599b0c73fc8941015
  main60 :: [Lib.Cell] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Base.map
                   @ Lib.Cell
                   @ GHC.Types.Char
                   Lib.cell2char) -}
6575c967b2a1ffcd052a4103ed85ecc9
  main61 ::
    GHC.Base.String
    -> [[GHC.Types.Char]]
    -> [[GHC.Types.Char]]
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ [[GHC.Types.Char]]
                   Main.main62
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]2
                   GHC.Show.$fShow[]_$s$fShow[]2) -}
76e949089277e023c98e690ec167d989
  main62 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main63) -}
d902cbc149e5147d83d7b94482da9ca5
  main63 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main64) -}
041e35b1700c498c31856f9bb226a916
  main64 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main36
                   Main.main65
                   GHC.Stack.Types.EmptyCallStack) -}
64ff2507f7dc811788782df87caa60ef
  main65 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main67
                   Main.main31
                   Main.main67
                   Main.main66) -}
f18ca1d8f02e4f73e64aa21412731654
  main66 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 33#) -}
243ab25b1b52495a311e8f2e751426ef
  main67 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 29#) -}
835fafdc044186fcc0731cdf83a261eb
  main68 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main69
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
da4ecca793c175122d5cc79434379b1f
  main69 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main70) -}
7a417df9011e41c081128b9417a9c777
  main7 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main79
                   Main.main8) -}
46ab6189bed4c956eed51007c9b7d089
  main70 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main71) -}
0a40e236f2ebe2014e5ff0247812202c
  main71 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main72) -}
22c235c2882b98fe105f28cd3536626e
  main72 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main73) -}
c60ad1cbcd11fae080927804f060b52e
  main73 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main47
                   Main.main74
                   GHC.Stack.Types.EmptyCallStack) -}
1bc6f0c2a168db3cfe7687e84fa8389e
  main74 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main76
                   Main.main45
                   Main.main76
                   Main.main75) -}
99a5376578dc175a932b7d0ed7fe32f9
  main75 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 56#) -}
50342e411ab19645fa18bfffcd859c8e
  main76 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 26#) -}
0765371c6365568afa2c339fe88bd1b3
  main77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main50
                   Main.main78) -}
e5f4d93dd3d506647a5ac5d8bf5349c2
  main78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "hould find all the words that exist on the Grid"#) -}
58262f335335c65494bafa91948935f3
  main79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main81
                   Main.main80) -}
e9b1d21d6d944c1657a307c54e1b6982
  main8 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main51
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main9
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
17a8674982e8a8e022889b87c8ac910c
  main80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "indWords"#) -}
469c326a0fdf08c38e5569e791ae4f3b
  main81 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'f'#) -}
9eb959fe8d6fa540887156881886fcd7
  main82 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main135
                   Main.main83) -}
c645573c1117d75e7529285b838c5f37
  main83 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main106
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main84
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
f0ee8f6cf78700b5fe52f08920a8bfe7
  main84 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main85
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
b86c6ab29bec2e21be418765674e0238
  main85 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main86) -}
29502d1de03fed120cb539f52296ad0d
  main86 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main48
                   Main.main98
                   GHC.Types.False
                   Main.main87
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
e5c3f14ff1fd64de5461fbb5969e6614
  main87 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main88) -}
5160919052d2f1c44d259755b1193b46
  main88 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.main91
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Base.Nothing @ [Lib.Cell])
                   Main.main89) -}
4476fbb24044195efb196d623c124a73
  main89 :: GHC.Base.Maybe [Lib.Cell]
  {- Unfolding: (case Data.Maybe.catMaybes1
                        @ [Lib.Cell]
                        (GHC.Base.map
                           @ [Lib.Cell]
                           @ (GHC.Base.Maybe [Lib.Cell])
                           (Lib.findWordInLine Main.main90)
                           (Lib.getLines Main.gwc)) of wild {
                   [] -> GHC.Base.Nothing @ [Lib.Cell]
                   : a1 ds1 -> GHC.Base.Just @ [Lib.Cell] a1 }) -}
9a87451bc5cf2c01dfc36e645d41f73f
  main9 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main10
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
7a2e4a4dc863e274e8526925f45dd0d5
  main90 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HAMSTER"#) -}
5cbe78f731782f3e5fa296b504ecddac
  main91 ::
    GHC.Base.String
    -> GHC.Base.Maybe [Lib.Cell]
    -> GHC.Base.Maybe [Lib.Cell]
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe [Lib.Cell])
                   Main.main92
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
bca6d9e5e616dd4a9c43214252da9862
  main92 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main93) -}
474b63c660d229203df31a58cd096bcf
  main93 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main94) -}
7d127ab9f54b0b57326feb7b48fa445d
  main94 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main36
                   Main.main95
                   GHC.Stack.Types.EmptyCallStack) -}
002ba87d7d793f8da9de531dd5ed33c1
  main95 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main35
                   Main.main34
                   Main.main33
                   Main.main97
                   Main.main31
                   Main.main97
                   Main.main96) -}
23058f675b55373d350445885ff517eb
  main96 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 45#) -}
61428cd71fe3d82affd871b697f2168b
  main97 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 23#) -}
5d2563f15465df969c79df1e9d02a8e0
  main98 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main99
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
f3e72b915aaa07799dc46046bb137571
  main99 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main100) -}
e70028c46ebfc870876633607c688438
  main_go ::
    [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
"SPEC/Main $fEqMaybe @ [Cell]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                          [Lib.Cell])
  GHC.Base.$fEqMaybe @ [Lib.Cell] $dEq = Main.$s$fEqMaybe
"SPEC/Main $fEq[] @ Cell" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                     Lib.Cell)
  GHC.Classes.$fEq[] @ Lib.Cell $dEq = Main.$s$fEqMaybe_$s$fEq[]
"SPEC/Main $fEq[] @ [Cell]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       [Lib.Cell])
  GHC.Classes.$fEq[] @ [Lib.Cell] $dEq = Main.$s$fEq[]
"SPEC/Main $fEq[]_$c/= @ Cell" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                          Lib.Cell)
  GHC.Classes.$fEq[]_$c/= @ Lib.Cell $dEq
  = Main.$s$fEqMaybe_$s$fEq[]_$c/=
"SPEC/Main $fEq[]_$c/= @ [Cell]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            [Lib.Cell])
  GHC.Classes.$fEq[]_$c/= @ [Lib.Cell] $dEq
  = Main.$s$fEq[]_$s$fEq[]_$c/=
"SPEC/Main $fShowMaybe @ [Cell]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                              [Lib.Cell])
  GHC.Show.$fShowMaybe @ [Lib.Cell] $dShow = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ [Cell]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                         [Lib.Cell])
  GHC.Show.$fShowMaybe_$cshowList @ [Lib.Cell] $dShow
  = Main.$s$fShowMaybe_$s$fShowMaybe_$cshowList
"SPEC/Main $fShow[] @ Cell" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         Lib.Cell)
  GHC.Show.$fShow[] @ Lib.Cell $dShow = Main.$s$fShowMaybe_$s$fShow[]
"SPEC/Main $fShow[] @ [Cell]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           [Lib.Cell])
  GHC.Show.$fShow[] @ [Lib.Cell] $dShow = Main.$s$fShow[]
"SPEC/Main $fShow[]_$cshow @ Cell" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                Lib.Cell)
  GHC.Show.$fShow[]_$cshow @ Lib.Cell $dShow
  = Main.$s$fShowMaybe_$s$fShow[]_$cshow
"SPEC/Main $fShow[]_$cshowList @ Cell" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                    Lib.Cell)
  GHC.Show.$fShow[]_$cshowList @ Lib.Cell $dShow
  = Main.$s$fShowMaybe_$s$fShow[]_$cshowList
"SPEC/Main $fShow[]_$cshowList @ [Cell]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                      [Lib.Cell])
  GHC.Show.$fShow[]_$cshowList @ [Lib.Cell] $dShow
  = Main.$s$fShow[]_$s$fShow[]_$cshowList
"SPEC/Main $fShow[]_$cshowsPrec @ Cell" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                     Lib.Cell)
  GHC.Show.$fShow[]_$cshowsPrec @ Lib.Cell $dShow
  = Main.$s$fShowMaybe_$s$fShow[]_$cshowsPrec
"SPEC/Main $fShow[]_$cshowsPrec @ [Cell]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                       [Lib.Cell])
  GHC.Show.$fShow[]_$cshowsPrec @ [Lib.Cell] $dShow
  = Main.$s$fShow[]_$s$fShow[]_$cshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

